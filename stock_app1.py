import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

@st.cache_data
def load_data():
    return pd.read_csv("15 Years Stock Data of NVDA AAPL MSFT GOOGL and AMZN.csv", parse_dates=['Date'])

data = load_data()

# =====================================
# –°–∞–π–¥–±–∞—Ä —Å 7 –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏
# =====================================
st.sidebar.header("üéöÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

# 1. –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–π —Å –∏–∫–æ–Ω–∫–∞–º–∏
companies = st.sidebar.multiselect(
    "üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
    options=['AAPL', 'AMZN', 'GOOGL', 'MSFT', 'NVDA'],
    default=['AAPL', 'NVDA'],
    format_func=lambda x: {
        'AAPL': 'üçé Apple',
        'AMZN': 'üì¶ Amazon', 
        'GOOGL': 'üîç Google',
        'MSFT': 'üñ•Ô∏è Microsoft',
        'NVDA': 'üéÆ NVIDIA'
    }[x]
)

# 2. –°–µ–ª–µ–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
time_resolution = st.sidebar.selectbox(
    "‚è≥ –ì—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:",
    options=['–î–Ω–∏', '–ù–µ–¥–µ–ª–∏', '–ú–µ—Å—è—Ü—ã'],
    index=0,
    help="–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º"
)

# 3. –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã
price_threshold = st.sidebar.slider(
    "üí∞ –ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã:",
    min_value=0,
    max_value=int(data[[f'Close_{c}' for c in companies]].max().max()),
    value=150,
    help="–û—Ç–º–µ—Ç–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π"
)

# 4. –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
chart_type = st.sidebar.radio(
    "üìä –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
    options=['–õ–∏–Ω–∏—è', '–°–≤–µ—á–∏', '–û–±–ª–∞—Å—Ç—å'],
    horizontal=True,
    index=0
)

# 5. –§–∏–ª—å—Ç—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
days_of_week = st.sidebar.multiselect(
    "üìÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏:",
    options=['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
    default=['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç'],
    help="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –¥–Ω—è–º"
)

# 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
show_legend = st.sidebar.checkbox("üëÅÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–µ–≥–µ–Ω–¥—É", True)
show_hover = st.sidebar.checkbox("üîç –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏", True)

# 7. –°–µ–ª–µ–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
indicator = st.sidebar.selectbox(
    "üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:",
    options=['–ù–µ—Ç', 'SMA (20)', 'EMA (50)', 'RSI (14)'],
    index=0
)

# =====================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# =====================================
# –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞—Å—à—Ç–∞–±—É
df = data.set_index('Date')
if time_resolution == '–ù–µ–¥–µ–ª–∏':
    df = df.resample('W').last()
elif time_resolution == '–ú–µ—Å—è—Ü—ã':
    df = df.resample('M').last()

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
day_mapping = {'–ü–Ω': 0, '–í—Ç': 1, '–°—Ä': 2, '–ß—Ç': 3, '–ü—Ç': 4, '–°–±': 5, '–í—Å': 6}
selected_days = [day_mapping[d] for d in days_of_week]
df = df[df.index.dayofweek.isin(selected_days)]

# =====================================
# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
# =====================================
st.title("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–∫—Ü–∏–π")
fig = go.Figure()

for company in companies:
    col = f'Close_{company}'
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    if chart_type == '–õ–∏–Ω–∏—è':
        fig.add_trace(go.Scatter(  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            x=df.index,
            y=df[col],
            name=company,
            line=dict(width=2)
        ))  # <-- –ó–¥–µ—Å—å –±—ã–ª–∞ –æ—à–∏–±–∫–∞!
    elif chart_type == '–°–≤–µ—á–∏' and len(companies) == 1:
        fig.add_trace(go.Candlestick(
            x=df.index,
            open=df[f'Open_{company}'],
            high=df[f'High_{company}'],
            low=df[f'Low_{company}'],
            close=df[col],
            name=company
        ))
    elif chart_type == '–û–±–ª–∞—Å—Ç—å':
        fig.add_trace(go.Scatter(
            x=df.index,
            y=df[col],
            name=company,
            stackgroup='one',
            mode='lines'
        ))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (—Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏!)
    if indicator == 'SMA (20)':
        sma = df[col].rolling(20).mean()
        fig.add_trace(go.Scatter(  # ‚úÖ
            x=df.index,
            y=sma,
            name=f'SMA 20 ({company})',
            line=dict(dash='dot')
        ))  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    elif indicator == 'EMA (50)':
        ema = df[col].ewm(span=50).mean()
        fig.add_trace(go.Scatter(
            x=df.index,
            y=ema,
            name=f'EMA 50 ({company})',
            line=dict(dash='dash')
        ))  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
fig.add_shape(
    type="line",
    x0=df.index.min(),
    x1=df.index.max(),
    y0=price_threshold,
    y1=price_threshold,
    line=dict(color="Red", width=2, dash="dot")
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
fig.update_layout(
    height=600,
    showlegend=show_legend,
    hovermode="x unified" if show_hover else False,
    xaxis_rangeslider_visible=False,
    title=f"–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω ({time_resolution.lower()})"
)

st.plotly_chart(fig, use_container_width=True)

# =====================================
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
# =====================================
# 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥")

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ (–º–∞–∫—Å–∏–º—É–º 3)
num_cols = min(len(companies), 3) if companies else 1  # –ù–µ –º–µ–Ω–µ–µ 1 –∫–æ–ª–æ–Ω–∫–∏
cols = st.columns(num_cols)

if companies:
    for idx, company in enumerate(companies):
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        with cols[idx % num_cols]:  
            if f'Close_{company}' in df.columns and not df.empty:
                try:
                    current_price = df[f'Close_{company}'].iloc[-1]
                    delta = current_price - df[f'Close_{company}'].iloc[0]
                    st.metric(
                        label=company,
                        value=f"${current_price:.2f}",
                        delta=f"{delta:.2f} ({delta/df[f'Close_{company}'].iloc[0]*100:.2f}%)"
                    )
                except IndexError:
                    st.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {company}")
            else:
                st.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {company} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
else:
    st.warning("‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã!")